DEFINITION MODULE StdIO ;

(*
   Author     : Gaius Mulley
   Title      : StdIO
   Date       : 12/2/86  [$Date: 1997-11-03 17:21:43 $]
   SYSTEM     : UNIX SUN and Logitech M2
   Description: Exports a general Read and Write procedure that ALL character
                processes should use.
   Version    : $Revision: 1.4 $
*)

(*
   Log        : $Log: StdIO.def,v $
   Log        : Revision 1.4  1997-11-03 17:21:43  gaius
   Log        : many alterations to the compilation server, it actually works now albeit
   Log        : it is still rather buggy!
   Log        :
   Log        : Revision 1.3  1997/05/28 10:35:39  gaius
   Log        : more work done on the compilation server under Linux.
   Log        : It now loads source files from the CSD.
   Log        :
   Log        : Revision 1.1.1.1  1996/05/28 10:21:08  gaius
   Log        : Modula-2 realtime system sources imported
   Log        :
*)
 
EXPORT QUALIFIED ProcRead, ProcWrite,
                 Read, Write, PushOutput, PopOutput, GetCurrentOutput, Init ;

 
TYPE
   ProcWrite = PROCEDURE (CHAR) ;
   ProcRead  = PROCEDURE (VAR CHAR) ;


(*
   Read - is the generic procedure that all higher application layers
          should use to receive a character.
*)

PROCEDURE Read (VAR ch: CHAR) ;


(*
   Write - is the generic procedure that all higher application layers
           should use to emit a character.
*)
 
PROCEDURE Write (ch: CHAR) ;


(*
   PushOutput - pushes the current Write procedure onto a stack,
                any future references to Write will actually invoke
                procedure, p.
*)

PROCEDURE PushOutput (p: ProcWrite) ;

 
(*
   PopOutput - restores Write to use the previous output procedure.
*)

PROCEDURE PopOutput ;


(*
   GetCurrentOutput - returns the current output procedure.
*)

PROCEDURE GetCurrentOutput () : ProcWrite ;


(*
   Init - initialize this module data structures.
          This is only made available for M2RTS.
*)

PROCEDURE Init ;

 
END StdIO.
